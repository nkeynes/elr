RoadMap for v1.0
-------------

Useability
* Better parser conflict debug output
* Better error reporting
* Possibly use named vars rather than positional vars?

Performance
* Implement table compression algorithm - Tarjan or better
* Optimize skeleton code, get performance to within epsilon of
      bison/flex.
* Test generator performance with larger grammars

Codebase
* Clean up print statements, convert to C++ cout<< expressions

Features
* Support EBNF (regular right-part) grammars
    - see nakata/sassa paper, etc
    - look into how antlr does it
* Implement minimal-state LR(1)
    - see pager, spector
* L-attribution?
* Cleanup actions
* Implement more advanced regular expression support. In particular:
    - group counts ( a{n,m} )
    - start of line/end of line ( ^, $ )
    - named character classes (eg [[:alpha:]])
* Additional backslash types:
    - \x34 (hex char)
    - \0377 (octal char)
    - \0 (null)
* Unicode?

Testing
* Unit tests
    - framework?
* Automated system test cases

